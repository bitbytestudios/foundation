# The author(s) disclaim copyright to this source-code.
# Can be licensed under MIT (in case the public domain is not recognized).
# More information can be found in the LICENSE file.

# Generates build.ninja to perform a static compile of foundation.
# You'll need ninja, https://github.com/martine/ninja

require 'rbconfig'

def platform
  if RbConfig::CONFIG['target_os'] =~ /windows/i
    'windows'
  if RbConfig::CONFIG['target_os'] =~ /mingw32/i
    'windows'
  elsif RbConfig::CONFIG['target_os'] =~ /darwin/i
    'macosx'
  elsif RbConfig::CONFIG['target_os'] =~ /linux/i
    'linux'
  elsif RbConfig::CONFIG['target_os'] =~ /bsd/i
    'bsd'
  end

  raise "#{RbConfig::CONFIG['target_os']} is an unsupported platform!"
end

def default_cc platform
  case platform
    when 'windows'
      'cl'
    when 'macosx'
      'clang'
    when 'linux'
      'gcc'
    when 'bsd'
      'clang'
    end
  end
end

def default_as platform
  case platform
    when 'windows'
      'nasm'
    when 'macosx'
      'nasm'
    when 'linux'
      'nasm'
    when 'bsd'
      'nasm'
    end
end

def default_ar platform
  case platform
    when 'windows'
      'lib'
    when 'macosx'
      'ar'
    when 'linux'
      'ar'
    when 'bsd'
      'ar'
    end
end

def default_ld platform
  case platform
    when 'windows'
      'link'
    when 'macosx'
      'ld'
    when 'linux'
      'ld'
    when 'bsd'
      'ld'
    end
end

def object_extension platform
  if platform == 'windows'
    '.obj'
  else
    '.o'
  end
end

def library_extension platform
  if platform == 'windows'
    '.lib'
  else
    '.a'
  end
end

namespace :foundation do
  desc "Generates a build.ninja"
  task :ninja, :platform, :configuration, :architecture do |t, args|
    args.with_defaults(
      :platform => platform(),
      :configuration => 'debug',
      :architecture => 'x86')

    config = args[:configuration]
    platform = args[:platform]
    arch = args[:architecture]

    raise "#{config} is not a valid configuration!" unless
      (config == 'debug') or (config == 'release')

    cc = ENV['CXX'] || default_cc(platform)
    as = ENV['AS'] || default_as(platform)
    ar = ENV['AR'] || default_ar(platform)
    ld = ENV['LD'] || default_ld(platform)
    cflags = []
    ldflags = []
    asflags = []

    case platform
      when 'windows'
        cflags = [
          '/nologo',
          '/Zi',
          '/W4',
          # '/WX',
          '/GR-',
          '/DNOMINMAX',
          '/D_CRT_SECURE_NO_WARNINGS'
        ]

        ldflags = ['/libpath:lib']
        ldflags = ldflags.concat ['/DEBUG'] if config == 'debug'

        # Release only optimzations.
        cflags = cflags.concat ['/Ox', '/DNDEBUG', '/GL'] if config != 'debug'
        ldflags = ldflags.concat ['/LTCG', '/OPT:REF', '/OPT:ICF'] if config != 'debug'

        cflags = cflags.concat ['/Iinclude']

        if arch == 'x86'
          asflags = asflags.concat ['-f win32']
        elsif arch == 'x86_64'
          asflags = asflags.concat ['-f win64']
        end
      when 'macosx'
        cflags = cflags.concat ['-Iinclude']

        if arch == 'x86'
          asflags = asflags.concat ['-f macho32']
        elsif arch == 'x86_64'
          asflags = asflags.concat ['-f macho64']
        end
      when 'linux'
        cflags = cflags.concat ['-Iinclude']

        if arch == 'x86'
          asflags = asflags.concat ['-f elf32']
        elsif arch == 'x86_64'
          asflags = asflags.concat ['-f elf64']
        end
      when 'bsd'
        cflags = cflags.concat ['-Iinclude']
        
        if arch == 'x86'
          asflags = asflags.concat ['-f elf32']
        elsif arch == 'x86_64'
          asflags = asflags.concat ['-f elf64']
        end
      end

    asflags = asflags.concat ['-Iinclude']

    File.open("build.ninja", "wb") do |n|
      n.write "# This file was auto-generated by Rakefile, modify it instead\n"
      n.write "# To use this build file you need https://github.com/martine/ninja\n"
      n.write "# :configuration = #{config}, :platform = #{platform} :architecture = #{arch}\n\n"

      n.write "cflags = #{cflags * ' '}\n"
      n.write "asflags = #{asflags * ' '}\n"
      n.write "ldflags = #{ldflags * ' '}\n\n"

      n.write "rule cxx\n"
      if platform == 'windows'
        n.write "  command = ninja -t msvc -o $out -- #{cc} /showIncludes $cflags -c $in /Fo$out\n"
        n.write "  depfile = $out.d\n\n"
      else
        n.write "  command = #{cc} -MMD -MT $out -MF $out.d $cflags -c $in -o $out\n"
        n.write "  depfile = $out.d\n\n"
      end

      n.write "rule as\n"
      n.write "  command = #{as} $asflags -o $out $in\n\n"

      n.write "rule ar\n"
      if platform == 'windows'
        n.write "  command = #{ar} /nologo /ltcg /out:$out $in\n\n"
      else
        n.write "  command = rm -f $out && #{ar} crs $out $in\n\n"
      end

      n.write "rule link\n"
      if platform == 'windows'
        n.write "  command = #{ld} $in $libs /nologo /link $ldflags /out:$out\n\n"
      else
        n.write "  command = #{ld} $ldflags -o $out $in $libs\n\n"
      end

      objs = []

      asm_sources = [
        "src/foundation/execution_state_#{arch}.asm"
      ]

      cxx_sources = [
        "src/nedmalloc.cc",
        "src/foundation/algorithm.cc",
        "src/foundation/allocator.cc",
        "src/foundation/array.cc",
        "src/foundation/condition_variable.cc",
        "src/foundation/crash_handler.cc",
        "src/foundation/debug_info.cc",
        "src/foundation/dictionary.cc",
        "src/foundation/digest.cc",
        "src/foundation/intrusive_list.cc",
        "src/foundation/memory.cc",
        "src/foundation/mutex.cc",
        "src/foundation/native_string.cc",
        "src/foundation/proxy_allocator.cc",
        "src/foundation/ring_buffer.cc",
        "src/foundation/scratch_allocator.cc",
        "src/foundation/string.cc",
        "src/foundation/temp_allocator.cc",
        "src/foundation/thread.cc"
      ]

      objs = []

      asm_sources.each do |src|
        obj = src.ext(object_extension(platform))
        objs = objs.concat [obj]
        n.write "build #{obj}: as #{src}\n"
      end

      cxx_sources.each do |src|
        obj = src.ext(object_extension(platform))
        objs = objs.concat [obj]
        n.write "build #{obj}: cxx #{src}\n"
      end

      n.write "\n"

      if config == 'debug'
        n.write "build foundation-dbg#{library_extension(platform)}: ar "
      else
        n.write "build foundation#{library_extension(platform)}: ar "
      end

      objs.each do |obj|
        n.write "#{obj} "
      end

      n.write "\n"

      if config == 'debug'
        n.write "default foundation-dbg#{library_extension(platform)}\n"
      else
        n.write "default foundation#{library_extension(platform)}\n"
      end
    end

    if platform == 'windows'
      raise "Expected VCINSTALLDIR to be defined!" unless ENV['VCINSTALLDIR']

      File.open("build.bat", "wb") do |f|
       f.write "\"#{ENV['VCINSTALLDIR']}\\vcvarsall.bat\"\n"
       f.write "ninja\n"
      end
    end
  end
end